// This file was automatically generated by a Python script.
// It requires the `requests` package to run.

use crate::enums;

impl TryFrom<u16> for enums::INPUT {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::INPUT::PropPointer),
            1 => Ok(enums::INPUT::PropDirect),
            2 => Ok(enums::INPUT::PropButtonpad),
            3 => Ok(enums::INPUT::PropSemiMt),
            4 => Ok(enums::INPUT::PropTopbuttonpad),
            5 => Ok(enums::INPUT::PropPointingStick),
            6 => Ok(enums::INPUT::PropAccelerometer),
            31 => Ok(enums::INPUT::PropMax),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::EV {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::EV::Syn),
            1 => Ok(enums::EV::Key),
            2 => Ok(enums::EV::Rel),
            3 => Ok(enums::EV::Abs),
            4 => Ok(enums::EV::Msc),
            5 => Ok(enums::EV::Sw),
            17 => Ok(enums::EV::Led),
            18 => Ok(enums::EV::Snd),
            20 => Ok(enums::EV::Rep),
            21 => Ok(enums::EV::Ff),
            22 => Ok(enums::EV::Pwr),
            23 => Ok(enums::EV::FfStatus),
            31 => Ok(enums::EV::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::SYN {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::SYN::Report),
            1 => Ok(enums::SYN::Config),
            2 => Ok(enums::SYN::MtReport),
            3 => Ok(enums::SYN::Dropped),
            15 => Ok(enums::SYN::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::KEY {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            1 => Ok(enums::KEY::Esc),
            2 => Ok(enums::KEY::Key1),
            3 => Ok(enums::KEY::Key2),
            4 => Ok(enums::KEY::Key3),
            5 => Ok(enums::KEY::Key4),
            6 => Ok(enums::KEY::Key5),
            7 => Ok(enums::KEY::Key6),
            8 => Ok(enums::KEY::Key7),
            9 => Ok(enums::KEY::Key8),
            10 => Ok(enums::KEY::Key9),
            11 => Ok(enums::KEY::Key0),
            12 => Ok(enums::KEY::Minus),
            13 => Ok(enums::KEY::Equal),
            14 => Ok(enums::KEY::Backspace),
            15 => Ok(enums::KEY::Tab),
            16 => Ok(enums::KEY::Q),
            17 => Ok(enums::KEY::W),
            18 => Ok(enums::KEY::E),
            19 => Ok(enums::KEY::R),
            20 => Ok(enums::KEY::T),
            21 => Ok(enums::KEY::Y),
            22 => Ok(enums::KEY::U),
            23 => Ok(enums::KEY::I),
            24 => Ok(enums::KEY::O),
            25 => Ok(enums::KEY::P),
            26 => Ok(enums::KEY::Leftbrace),
            27 => Ok(enums::KEY::Rightbrace),
            28 => Ok(enums::KEY::Enter),
            29 => Ok(enums::KEY::Leftctrl),
            30 => Ok(enums::KEY::A),
            31 => Ok(enums::KEY::S),
            32 => Ok(enums::KEY::D),
            33 => Ok(enums::KEY::F),
            34 => Ok(enums::KEY::G),
            35 => Ok(enums::KEY::H),
            36 => Ok(enums::KEY::J),
            37 => Ok(enums::KEY::K),
            38 => Ok(enums::KEY::L),
            39 => Ok(enums::KEY::Semicolon),
            40 => Ok(enums::KEY::Apostrophe),
            41 => Ok(enums::KEY::Grave),
            42 => Ok(enums::KEY::Leftshift),
            43 => Ok(enums::KEY::Backslash),
            44 => Ok(enums::KEY::Z),
            45 => Ok(enums::KEY::X),
            46 => Ok(enums::KEY::C),
            47 => Ok(enums::KEY::V),
            48 => Ok(enums::KEY::B),
            49 => Ok(enums::KEY::N),
            50 => Ok(enums::KEY::M),
            51 => Ok(enums::KEY::Comma),
            52 => Ok(enums::KEY::Dot),
            53 => Ok(enums::KEY::Slash),
            54 => Ok(enums::KEY::Rightshift),
            55 => Ok(enums::KEY::Kpasterisk),
            56 => Ok(enums::KEY::Leftalt),
            57 => Ok(enums::KEY::Space),
            58 => Ok(enums::KEY::Capslock),
            59 => Ok(enums::KEY::F1),
            60 => Ok(enums::KEY::F2),
            61 => Ok(enums::KEY::F3),
            62 => Ok(enums::KEY::F4),
            63 => Ok(enums::KEY::F5),
            64 => Ok(enums::KEY::F6),
            65 => Ok(enums::KEY::F7),
            66 => Ok(enums::KEY::F8),
            67 => Ok(enums::KEY::F9),
            68 => Ok(enums::KEY::F10),
            69 => Ok(enums::KEY::Numlock),
            70 => Ok(enums::KEY::Scrolllock),
            71 => Ok(enums::KEY::Kp7),
            72 => Ok(enums::KEY::Kp8),
            73 => Ok(enums::KEY::Kp9),
            74 => Ok(enums::KEY::Kpminus),
            75 => Ok(enums::KEY::Kp4),
            76 => Ok(enums::KEY::Kp5),
            77 => Ok(enums::KEY::Kp6),
            78 => Ok(enums::KEY::Kpplus),
            79 => Ok(enums::KEY::Kp1),
            80 => Ok(enums::KEY::Kp2),
            81 => Ok(enums::KEY::Kp3),
            82 => Ok(enums::KEY::Kp0),
            83 => Ok(enums::KEY::Kpdot),
            85 => Ok(enums::KEY::Zenkakuhankaku),
            86 => Ok(enums::KEY::Key102nd),
            87 => Ok(enums::KEY::F11),
            88 => Ok(enums::KEY::F12),
            89 => Ok(enums::KEY::Ro),
            90 => Ok(enums::KEY::Katakana),
            91 => Ok(enums::KEY::Hiragana),
            92 => Ok(enums::KEY::Henkan),
            93 => Ok(enums::KEY::Katakanahiragana),
            94 => Ok(enums::KEY::Muhenkan),
            95 => Ok(enums::KEY::Kpjpcomma),
            96 => Ok(enums::KEY::Kpenter),
            97 => Ok(enums::KEY::Rightctrl),
            98 => Ok(enums::KEY::Kpslash),
            99 => Ok(enums::KEY::Sysrq),
            100 => Ok(enums::KEY::Rightalt),
            101 => Ok(enums::KEY::Linefeed),
            102 => Ok(enums::KEY::Home),
            103 => Ok(enums::KEY::Up),
            104 => Ok(enums::KEY::Pageup),
            105 => Ok(enums::KEY::Left),
            106 => Ok(enums::KEY::Right),
            107 => Ok(enums::KEY::End),
            108 => Ok(enums::KEY::Down),
            109 => Ok(enums::KEY::Pagedown),
            110 => Ok(enums::KEY::Insert),
            111 => Ok(enums::KEY::Delete),
            112 => Ok(enums::KEY::Macro),
            113 => Ok(enums::KEY::Mute),
            114 => Ok(enums::KEY::Volumedown),
            115 => Ok(enums::KEY::Volumeup),
            116 => Ok(enums::KEY::Power),
            117 => Ok(enums::KEY::Kpequal),
            118 => Ok(enums::KEY::Kpplusminus),
            119 => Ok(enums::KEY::Pause),
            120 => Ok(enums::KEY::Scale),
            121 => Ok(enums::KEY::Kpcomma),
            122 => Ok(enums::KEY::Hangeul),
            123 => Ok(enums::KEY::Hanja),
            124 => Ok(enums::KEY::Yen),
            125 => Ok(enums::KEY::Leftmeta),
            126 => Ok(enums::KEY::Rightmeta),
            127 => Ok(enums::KEY::Compose),
            128 => Ok(enums::KEY::Stop),
            129 => Ok(enums::KEY::Again),
            130 => Ok(enums::KEY::Props),
            131 => Ok(enums::KEY::Undo),
            132 => Ok(enums::KEY::Front),
            133 => Ok(enums::KEY::Copy),
            134 => Ok(enums::KEY::Open),
            135 => Ok(enums::KEY::Paste),
            136 => Ok(enums::KEY::Find),
            137 => Ok(enums::KEY::Cut),
            138 => Ok(enums::KEY::Help),
            139 => Ok(enums::KEY::Menu),
            140 => Ok(enums::KEY::Calc),
            141 => Ok(enums::KEY::Setup),
            142 => Ok(enums::KEY::Sleep),
            143 => Ok(enums::KEY::Wakeup),
            144 => Ok(enums::KEY::File),
            145 => Ok(enums::KEY::Sendfile),
            146 => Ok(enums::KEY::Deletefile),
            147 => Ok(enums::KEY::Xfer),
            148 => Ok(enums::KEY::Prog1),
            149 => Ok(enums::KEY::Prog2),
            150 => Ok(enums::KEY::Www),
            151 => Ok(enums::KEY::Msdos),
            152 => Ok(enums::KEY::Coffee),
            153 => Ok(enums::KEY::RotateDisplay),
            154 => Ok(enums::KEY::Cyclewindows),
            155 => Ok(enums::KEY::Mail),
            156 => Ok(enums::KEY::Bookmarks),
            157 => Ok(enums::KEY::Computer),
            158 => Ok(enums::KEY::Back),
            159 => Ok(enums::KEY::Forward),
            160 => Ok(enums::KEY::Closecd),
            161 => Ok(enums::KEY::Ejectcd),
            162 => Ok(enums::KEY::Ejectclosecd),
            163 => Ok(enums::KEY::Nextsong),
            164 => Ok(enums::KEY::Playpause),
            165 => Ok(enums::KEY::Previoussong),
            166 => Ok(enums::KEY::Stopcd),
            167 => Ok(enums::KEY::Record),
            168 => Ok(enums::KEY::Rewind),
            169 => Ok(enums::KEY::Phone),
            170 => Ok(enums::KEY::Iso),
            171 => Ok(enums::KEY::Config),
            172 => Ok(enums::KEY::Homepage),
            173 => Ok(enums::KEY::Refresh),
            174 => Ok(enums::KEY::Exit),
            175 => Ok(enums::KEY::Move),
            176 => Ok(enums::KEY::Edit),
            177 => Ok(enums::KEY::Scrollup),
            178 => Ok(enums::KEY::Scrolldown),
            179 => Ok(enums::KEY::Kpleftparen),
            180 => Ok(enums::KEY::Kprightparen),
            181 => Ok(enums::KEY::New),
            182 => Ok(enums::KEY::Redo),
            183 => Ok(enums::KEY::F13),
            184 => Ok(enums::KEY::F14),
            185 => Ok(enums::KEY::F15),
            186 => Ok(enums::KEY::F16),
            187 => Ok(enums::KEY::F17),
            188 => Ok(enums::KEY::F18),
            189 => Ok(enums::KEY::F19),
            190 => Ok(enums::KEY::F20),
            191 => Ok(enums::KEY::F21),
            192 => Ok(enums::KEY::F22),
            193 => Ok(enums::KEY::F23),
            194 => Ok(enums::KEY::F24),
            200 => Ok(enums::KEY::Playcd),
            201 => Ok(enums::KEY::Pausecd),
            202 => Ok(enums::KEY::Prog3),
            203 => Ok(enums::KEY::Prog4),
            204 => Ok(enums::KEY::Dashboard),
            205 => Ok(enums::KEY::Suspend),
            206 => Ok(enums::KEY::Close),
            207 => Ok(enums::KEY::Play),
            208 => Ok(enums::KEY::Fastforward),
            209 => Ok(enums::KEY::Bassboost),
            210 => Ok(enums::KEY::Print),
            211 => Ok(enums::KEY::Hp),
            212 => Ok(enums::KEY::Camera),
            213 => Ok(enums::KEY::Sound),
            214 => Ok(enums::KEY::Question),
            215 => Ok(enums::KEY::Email),
            216 => Ok(enums::KEY::Chat),
            217 => Ok(enums::KEY::Search),
            218 => Ok(enums::KEY::Connect),
            219 => Ok(enums::KEY::Finance),
            220 => Ok(enums::KEY::Sport),
            221 => Ok(enums::KEY::Shop),
            222 => Ok(enums::KEY::Alterase),
            223 => Ok(enums::KEY::Cancel),
            224 => Ok(enums::KEY::Brightnessdown),
            225 => Ok(enums::KEY::Brightnessup),
            226 => Ok(enums::KEY::Media),
            227 => Ok(enums::KEY::Switchvideomode),
            228 => Ok(enums::KEY::Kbdillumtoggle),
            229 => Ok(enums::KEY::Kbdillumdown),
            230 => Ok(enums::KEY::Kbdillumup),
            231 => Ok(enums::KEY::Send),
            232 => Ok(enums::KEY::Reply),
            233 => Ok(enums::KEY::Forwardmail),
            234 => Ok(enums::KEY::Save),
            235 => Ok(enums::KEY::Documents),
            236 => Ok(enums::KEY::Battery),
            237 => Ok(enums::KEY::Bluetooth),
            238 => Ok(enums::KEY::Wlan),
            239 => Ok(enums::KEY::Uwb),
            240 => Ok(enums::KEY::Unknown),
            241 => Ok(enums::KEY::VideoNext),
            242 => Ok(enums::KEY::VideoPrev),
            243 => Ok(enums::KEY::BrightnessCycle),
            244 => Ok(enums::KEY::BrightnessAuto),
            245 => Ok(enums::KEY::DisplayOff),
            246 => Ok(enums::KEY::Wwan),
            247 => Ok(enums::KEY::Rfkill),
            248 => Ok(enums::KEY::Micmute),
            352 => Ok(enums::KEY::Ok),
            353 => Ok(enums::KEY::Select),
            354 => Ok(enums::KEY::Goto),
            355 => Ok(enums::KEY::Clear),
            356 => Ok(enums::KEY::Power2),
            357 => Ok(enums::KEY::Option),
            358 => Ok(enums::KEY::Info),
            359 => Ok(enums::KEY::Time),
            360 => Ok(enums::KEY::Vendor),
            361 => Ok(enums::KEY::Archive),
            362 => Ok(enums::KEY::Program),
            363 => Ok(enums::KEY::Channel),
            364 => Ok(enums::KEY::Favorites),
            365 => Ok(enums::KEY::Epg),
            366 => Ok(enums::KEY::Pvr),
            367 => Ok(enums::KEY::Mhp),
            368 => Ok(enums::KEY::Language),
            369 => Ok(enums::KEY::Title),
            370 => Ok(enums::KEY::Subtitle),
            371 => Ok(enums::KEY::Angle),
            372 => Ok(enums::KEY::FullScreen),
            373 => Ok(enums::KEY::Mode),
            374 => Ok(enums::KEY::Keyboard),
            375 => Ok(enums::KEY::AspectRatio),
            376 => Ok(enums::KEY::Pc),
            377 => Ok(enums::KEY::Tv),
            378 => Ok(enums::KEY::Tv2),
            379 => Ok(enums::KEY::Vcr),
            380 => Ok(enums::KEY::Vcr2),
            381 => Ok(enums::KEY::Sat),
            382 => Ok(enums::KEY::Sat2),
            383 => Ok(enums::KEY::Cd),
            384 => Ok(enums::KEY::Tape),
            385 => Ok(enums::KEY::Radio),
            386 => Ok(enums::KEY::Tuner),
            387 => Ok(enums::KEY::Player),
            388 => Ok(enums::KEY::Text),
            389 => Ok(enums::KEY::Dvd),
            390 => Ok(enums::KEY::Aux),
            391 => Ok(enums::KEY::Mp3),
            392 => Ok(enums::KEY::Audio),
            393 => Ok(enums::KEY::Video),
            394 => Ok(enums::KEY::Directory),
            395 => Ok(enums::KEY::List),
            396 => Ok(enums::KEY::Memo),
            397 => Ok(enums::KEY::Calendar),
            398 => Ok(enums::KEY::Red),
            399 => Ok(enums::KEY::Green),
            400 => Ok(enums::KEY::Yellow),
            401 => Ok(enums::KEY::Blue),
            402 => Ok(enums::KEY::Channelup),
            403 => Ok(enums::KEY::Channeldown),
            404 => Ok(enums::KEY::First),
            405 => Ok(enums::KEY::Last),
            406 => Ok(enums::KEY::Ab),
            407 => Ok(enums::KEY::Next),
            408 => Ok(enums::KEY::Restart),
            409 => Ok(enums::KEY::Slow),
            410 => Ok(enums::KEY::Shuffle),
            411 => Ok(enums::KEY::Break),
            412 => Ok(enums::KEY::Previous),
            413 => Ok(enums::KEY::Digits),
            414 => Ok(enums::KEY::Teen),
            415 => Ok(enums::KEY::Twen),
            416 => Ok(enums::KEY::Videophone),
            417 => Ok(enums::KEY::Games),
            418 => Ok(enums::KEY::Zoomin),
            419 => Ok(enums::KEY::Zoomout),
            420 => Ok(enums::KEY::Zoomreset),
            421 => Ok(enums::KEY::Wordprocessor),
            422 => Ok(enums::KEY::Editor),
            423 => Ok(enums::KEY::Spreadsheet),
            424 => Ok(enums::KEY::Graphicseditor),
            425 => Ok(enums::KEY::Presentation),
            426 => Ok(enums::KEY::Database),
            427 => Ok(enums::KEY::News),
            428 => Ok(enums::KEY::Voicemail),
            429 => Ok(enums::KEY::Addressbook),
            430 => Ok(enums::KEY::Messenger),
            431 => Ok(enums::KEY::Displaytoggle),
            432 => Ok(enums::KEY::Spellcheck),
            433 => Ok(enums::KEY::Logoff),
            434 => Ok(enums::KEY::Dollar),
            435 => Ok(enums::KEY::Euro),
            436 => Ok(enums::KEY::Frameback),
            437 => Ok(enums::KEY::Frameforward),
            438 => Ok(enums::KEY::ContextMenu),
            439 => Ok(enums::KEY::MediaRepeat),
            440 => Ok(enums::KEY::Key10channelsup),
            441 => Ok(enums::KEY::Key10channelsdown),
            442 => Ok(enums::KEY::Images),
            448 => Ok(enums::KEY::DelEol),
            449 => Ok(enums::KEY::DelEos),
            450 => Ok(enums::KEY::InsLine),
            451 => Ok(enums::KEY::DelLine),
            464 => Ok(enums::KEY::Fn),
            465 => Ok(enums::KEY::FnEsc),
            466 => Ok(enums::KEY::FnF1),
            467 => Ok(enums::KEY::FnF2),
            468 => Ok(enums::KEY::FnF3),
            469 => Ok(enums::KEY::FnF4),
            470 => Ok(enums::KEY::FnF5),
            471 => Ok(enums::KEY::FnF6),
            472 => Ok(enums::KEY::FnF7),
            473 => Ok(enums::KEY::FnF8),
            474 => Ok(enums::KEY::FnF9),
            475 => Ok(enums::KEY::FnF10),
            476 => Ok(enums::KEY::FnF11),
            477 => Ok(enums::KEY::FnF12),
            478 => Ok(enums::KEY::Fn1),
            479 => Ok(enums::KEY::Fn2),
            480 => Ok(enums::KEY::FnD),
            481 => Ok(enums::KEY::FnE),
            482 => Ok(enums::KEY::FnF),
            483 => Ok(enums::KEY::FnS),
            484 => Ok(enums::KEY::FnB),
            497 => Ok(enums::KEY::BrlDot1),
            498 => Ok(enums::KEY::BrlDot2),
            499 => Ok(enums::KEY::BrlDot3),
            500 => Ok(enums::KEY::BrlDot4),
            501 => Ok(enums::KEY::BrlDot5),
            502 => Ok(enums::KEY::BrlDot6),
            503 => Ok(enums::KEY::BrlDot7),
            504 => Ok(enums::KEY::BrlDot8),
            505 => Ok(enums::KEY::BrlDot9),
            506 => Ok(enums::KEY::BrlDot10),
            512 => Ok(enums::KEY::Numeric0),
            513 => Ok(enums::KEY::Numeric1),
            514 => Ok(enums::KEY::Numeric2),
            515 => Ok(enums::KEY::Numeric3),
            516 => Ok(enums::KEY::Numeric4),
            517 => Ok(enums::KEY::Numeric5),
            518 => Ok(enums::KEY::Numeric6),
            519 => Ok(enums::KEY::Numeric7),
            520 => Ok(enums::KEY::Numeric8),
            521 => Ok(enums::KEY::Numeric9),
            522 => Ok(enums::KEY::NumericStar),
            523 => Ok(enums::KEY::NumericPound),
            524 => Ok(enums::KEY::NumericA),
            525 => Ok(enums::KEY::NumericB),
            526 => Ok(enums::KEY::NumericC),
            527 => Ok(enums::KEY::NumericD),
            528 => Ok(enums::KEY::CameraFocus),
            529 => Ok(enums::KEY::WpsButton),
            530 => Ok(enums::KEY::TouchpadToggle),
            531 => Ok(enums::KEY::TouchpadOn),
            532 => Ok(enums::KEY::TouchpadOff),
            533 => Ok(enums::KEY::CameraZoomin),
            534 => Ok(enums::KEY::CameraZoomout),
            535 => Ok(enums::KEY::CameraUp),
            536 => Ok(enums::KEY::CameraDown),
            537 => Ok(enums::KEY::CameraLeft),
            538 => Ok(enums::KEY::CameraRight),
            539 => Ok(enums::KEY::AttendantOn),
            540 => Ok(enums::KEY::AttendantOff),
            541 => Ok(enums::KEY::AttendantToggle),
            542 => Ok(enums::KEY::LightsToggle),
            560 => Ok(enums::KEY::AlsToggle),
            561 => Ok(enums::KEY::RotateLockToggle),
            576 => Ok(enums::KEY::Buttonconfig),
            577 => Ok(enums::KEY::Taskmanager),
            578 => Ok(enums::KEY::Journal),
            579 => Ok(enums::KEY::Controlpanel),
            580 => Ok(enums::KEY::Appselect),
            581 => Ok(enums::KEY::Screensaver),
            582 => Ok(enums::KEY::Voicecommand),
            583 => Ok(enums::KEY::Assistant),
            584 => Ok(enums::KEY::KbdLayoutNext),
            592 => Ok(enums::KEY::BrightnessMin),
            593 => Ok(enums::KEY::BrightnessMax),
            608 => Ok(enums::KEY::KbdinputassistPrev),
            609 => Ok(enums::KEY::KbdinputassistNext),
            610 => Ok(enums::KEY::KbdinputassistPrevgroup),
            611 => Ok(enums::KEY::KbdinputassistNextgroup),
            612 => Ok(enums::KEY::KbdinputassistAccept),
            613 => Ok(enums::KEY::KbdinputassistCancel),
            614 => Ok(enums::KEY::RightUp),
            615 => Ok(enums::KEY::RightDown),
            616 => Ok(enums::KEY::LeftUp),
            617 => Ok(enums::KEY::LeftDown),
            618 => Ok(enums::KEY::RootMenu),
            619 => Ok(enums::KEY::MediaTopMenu),
            620 => Ok(enums::KEY::Numeric11),
            621 => Ok(enums::KEY::Numeric12),
            622 => Ok(enums::KEY::AudioDesc),
            623 => Ok(enums::KEY::Key3dMode),
            624 => Ok(enums::KEY::NextFavorite),
            625 => Ok(enums::KEY::StopRecord),
            626 => Ok(enums::KEY::PauseRecord),
            627 => Ok(enums::KEY::Vod),
            628 => Ok(enums::KEY::Unmute),
            629 => Ok(enums::KEY::Fastreverse),
            630 => Ok(enums::KEY::Slowreverse),
            631 => Ok(enums::KEY::Data),
            632 => Ok(enums::KEY::OnscreenKeyboard),
            633 => Ok(enums::KEY::PrivacyScreenToggle),
            634 => Ok(enums::KEY::SelectiveScreenshot),
            656 => Ok(enums::KEY::Macro1),
            657 => Ok(enums::KEY::Macro2),
            658 => Ok(enums::KEY::Macro3),
            659 => Ok(enums::KEY::Macro4),
            660 => Ok(enums::KEY::Macro5),
            661 => Ok(enums::KEY::Macro6),
            662 => Ok(enums::KEY::Macro7),
            663 => Ok(enums::KEY::Macro8),
            664 => Ok(enums::KEY::Macro9),
            665 => Ok(enums::KEY::Macro10),
            666 => Ok(enums::KEY::Macro11),
            667 => Ok(enums::KEY::Macro12),
            668 => Ok(enums::KEY::Macro13),
            669 => Ok(enums::KEY::Macro14),
            670 => Ok(enums::KEY::Macro15),
            671 => Ok(enums::KEY::Macro16),
            672 => Ok(enums::KEY::Macro17),
            673 => Ok(enums::KEY::Macro18),
            674 => Ok(enums::KEY::Macro19),
            675 => Ok(enums::KEY::Macro20),
            676 => Ok(enums::KEY::Macro21),
            677 => Ok(enums::KEY::Macro22),
            678 => Ok(enums::KEY::Macro23),
            679 => Ok(enums::KEY::Macro24),
            680 => Ok(enums::KEY::Macro25),
            681 => Ok(enums::KEY::Macro26),
            682 => Ok(enums::KEY::Macro27),
            683 => Ok(enums::KEY::Macro28),
            684 => Ok(enums::KEY::Macro29),
            685 => Ok(enums::KEY::Macro30),
            688 => Ok(enums::KEY::MacroRecordStart),
            689 => Ok(enums::KEY::MacroRecordStop),
            690 => Ok(enums::KEY::MacroPresetCycle),
            691 => Ok(enums::KEY::MacroPreset1),
            692 => Ok(enums::KEY::MacroPreset2),
            693 => Ok(enums::KEY::MacroPreset3),
            696 => Ok(enums::KEY::KbdLcdMenu1),
            697 => Ok(enums::KEY::KbdLcdMenu2),
            698 => Ok(enums::KEY::KbdLcdMenu3),
            699 => Ok(enums::KEY::KbdLcdMenu4),
            700 => Ok(enums::KEY::KbdLcdMenu5),
            767 => Ok(enums::KEY::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::BTN {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            256 => Ok(enums::BTN::Btn0),
            257 => Ok(enums::BTN::Btn1),
            258 => Ok(enums::BTN::Btn2),
            259 => Ok(enums::BTN::Btn3),
            260 => Ok(enums::BTN::Btn4),
            261 => Ok(enums::BTN::Btn5),
            262 => Ok(enums::BTN::Btn6),
            263 => Ok(enums::BTN::Btn7),
            264 => Ok(enums::BTN::Btn8),
            265 => Ok(enums::BTN::Btn9),
            272 => Ok(enums::BTN::Left),
            273 => Ok(enums::BTN::Right),
            274 => Ok(enums::BTN::Middle),
            275 => Ok(enums::BTN::Side),
            276 => Ok(enums::BTN::Extra),
            277 => Ok(enums::BTN::Forward),
            278 => Ok(enums::BTN::Back),
            279 => Ok(enums::BTN::Task),
            288 => Ok(enums::BTN::Trigger),
            289 => Ok(enums::BTN::Thumb),
            290 => Ok(enums::BTN::Thumb2),
            291 => Ok(enums::BTN::Top),
            292 => Ok(enums::BTN::Top2),
            293 => Ok(enums::BTN::Pinkie),
            294 => Ok(enums::BTN::Base),
            295 => Ok(enums::BTN::Base2),
            296 => Ok(enums::BTN::Base3),
            297 => Ok(enums::BTN::Base4),
            298 => Ok(enums::BTN::Base5),
            299 => Ok(enums::BTN::Base6),
            303 => Ok(enums::BTN::Dead),
            304 => Ok(enums::BTN::South),
            305 => Ok(enums::BTN::East),
            306 => Ok(enums::BTN::C),
            307 => Ok(enums::BTN::North),
            308 => Ok(enums::BTN::West),
            309 => Ok(enums::BTN::Z),
            310 => Ok(enums::BTN::Tl),
            311 => Ok(enums::BTN::Tr),
            312 => Ok(enums::BTN::Tl2),
            313 => Ok(enums::BTN::Tr2),
            314 => Ok(enums::BTN::Select),
            315 => Ok(enums::BTN::Start),
            316 => Ok(enums::BTN::Mode),
            317 => Ok(enums::BTN::Thumbl),
            318 => Ok(enums::BTN::Thumbr),
            320 => Ok(enums::BTN::ToolPen),
            321 => Ok(enums::BTN::ToolRubber),
            322 => Ok(enums::BTN::ToolBrush),
            323 => Ok(enums::BTN::ToolPencil),
            324 => Ok(enums::BTN::ToolAirbrush),
            325 => Ok(enums::BTN::ToolFinger),
            326 => Ok(enums::BTN::ToolMouse),
            327 => Ok(enums::BTN::ToolLens),
            328 => Ok(enums::BTN::ToolQuinttap),
            329 => Ok(enums::BTN::Stylus3),
            330 => Ok(enums::BTN::Touch),
            331 => Ok(enums::BTN::Stylus),
            332 => Ok(enums::BTN::Stylus2),
            333 => Ok(enums::BTN::ToolDoubletap),
            334 => Ok(enums::BTN::ToolTripletap),
            335 => Ok(enums::BTN::ToolQuadtap),
            336 => Ok(enums::BTN::GearDown),
            337 => Ok(enums::BTN::GearUp),
            544 => Ok(enums::BTN::DpadUp),
            545 => Ok(enums::BTN::DpadDown),
            546 => Ok(enums::BTN::DpadLeft),
            547 => Ok(enums::BTN::DpadRight),
            704 => Ok(enums::BTN::TriggerHappy1),
            705 => Ok(enums::BTN::TriggerHappy2),
            706 => Ok(enums::BTN::TriggerHappy3),
            707 => Ok(enums::BTN::TriggerHappy4),
            708 => Ok(enums::BTN::TriggerHappy5),
            709 => Ok(enums::BTN::TriggerHappy6),
            710 => Ok(enums::BTN::TriggerHappy7),
            711 => Ok(enums::BTN::TriggerHappy8),
            712 => Ok(enums::BTN::TriggerHappy9),
            713 => Ok(enums::BTN::TriggerHappy10),
            714 => Ok(enums::BTN::TriggerHappy11),
            715 => Ok(enums::BTN::TriggerHappy12),
            716 => Ok(enums::BTN::TriggerHappy13),
            717 => Ok(enums::BTN::TriggerHappy14),
            718 => Ok(enums::BTN::TriggerHappy15),
            719 => Ok(enums::BTN::TriggerHappy16),
            720 => Ok(enums::BTN::TriggerHappy17),
            721 => Ok(enums::BTN::TriggerHappy18),
            722 => Ok(enums::BTN::TriggerHappy19),
            723 => Ok(enums::BTN::TriggerHappy20),
            724 => Ok(enums::BTN::TriggerHappy21),
            725 => Ok(enums::BTN::TriggerHappy22),
            726 => Ok(enums::BTN::TriggerHappy23),
            727 => Ok(enums::BTN::TriggerHappy24),
            728 => Ok(enums::BTN::TriggerHappy25),
            729 => Ok(enums::BTN::TriggerHappy26),
            730 => Ok(enums::BTN::TriggerHappy27),
            731 => Ok(enums::BTN::TriggerHappy28),
            732 => Ok(enums::BTN::TriggerHappy29),
            733 => Ok(enums::BTN::TriggerHappy30),
            734 => Ok(enums::BTN::TriggerHappy31),
            735 => Ok(enums::BTN::TriggerHappy32),
            736 => Ok(enums::BTN::TriggerHappy33),
            737 => Ok(enums::BTN::TriggerHappy34),
            738 => Ok(enums::BTN::TriggerHappy35),
            739 => Ok(enums::BTN::TriggerHappy36),
            740 => Ok(enums::BTN::TriggerHappy37),
            741 => Ok(enums::BTN::TriggerHappy38),
            742 => Ok(enums::BTN::TriggerHappy39),
            743 => Ok(enums::BTN::TriggerHappy40),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::REL {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::REL::X),
            1 => Ok(enums::REL::Y),
            2 => Ok(enums::REL::Z),
            3 => Ok(enums::REL::Rx),
            4 => Ok(enums::REL::Ry),
            5 => Ok(enums::REL::Rz),
            6 => Ok(enums::REL::Hwheel),
            7 => Ok(enums::REL::Dial),
            8 => Ok(enums::REL::Wheel),
            9 => Ok(enums::REL::Misc),
            11 => Ok(enums::REL::WheelHiRes),
            12 => Ok(enums::REL::HwheelHiRes),
            15 => Ok(enums::REL::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::ABS {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::ABS::X),
            1 => Ok(enums::ABS::Y),
            2 => Ok(enums::ABS::Z),
            3 => Ok(enums::ABS::Rx),
            4 => Ok(enums::ABS::Ry),
            5 => Ok(enums::ABS::Rz),
            6 => Ok(enums::ABS::Throttle),
            7 => Ok(enums::ABS::Rudder),
            8 => Ok(enums::ABS::Wheel),
            9 => Ok(enums::ABS::Gas),
            10 => Ok(enums::ABS::Brake),
            16 => Ok(enums::ABS::Hat0x),
            17 => Ok(enums::ABS::Hat0y),
            18 => Ok(enums::ABS::Hat1x),
            19 => Ok(enums::ABS::Hat1y),
            20 => Ok(enums::ABS::Hat2x),
            21 => Ok(enums::ABS::Hat2y),
            22 => Ok(enums::ABS::Hat3x),
            23 => Ok(enums::ABS::Hat3y),
            24 => Ok(enums::ABS::Pressure),
            25 => Ok(enums::ABS::Distance),
            26 => Ok(enums::ABS::TiltX),
            27 => Ok(enums::ABS::TiltY),
            28 => Ok(enums::ABS::ToolWidth),
            32 => Ok(enums::ABS::Volume),
            40 => Ok(enums::ABS::Misc),
            47 => Ok(enums::ABS::MtSlot),
            48 => Ok(enums::ABS::MtTouchMajor),
            49 => Ok(enums::ABS::MtTouchMinor),
            50 => Ok(enums::ABS::MtWidthMajor),
            51 => Ok(enums::ABS::MtWidthMinor),
            52 => Ok(enums::ABS::MtOrientation),
            53 => Ok(enums::ABS::MtPositionX),
            54 => Ok(enums::ABS::MtPositionY),
            55 => Ok(enums::ABS::MtToolType),
            56 => Ok(enums::ABS::MtBlobId),
            57 => Ok(enums::ABS::MtTrackingId),
            58 => Ok(enums::ABS::MtPressure),
            59 => Ok(enums::ABS::MtDistance),
            60 => Ok(enums::ABS::MtToolX),
            61 => Ok(enums::ABS::MtToolY),
            63 => Ok(enums::ABS::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::SW {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::SW::Lid),
            1 => Ok(enums::SW::TabletMode),
            2 => Ok(enums::SW::HeadphoneInsert),
            3 => Ok(enums::SW::RfkillAll),
            4 => Ok(enums::SW::MicrophoneInsert),
            5 => Ok(enums::SW::Dock),
            6 => Ok(enums::SW::LineoutInsert),
            7 => Ok(enums::SW::JackPhysicalInsert),
            8 => Ok(enums::SW::VideooutInsert),
            9 => Ok(enums::SW::CameraLensCover),
            10 => Ok(enums::SW::KeypadSlide),
            11 => Ok(enums::SW::FrontProximity),
            12 => Ok(enums::SW::RotateLock),
            13 => Ok(enums::SW::LineinInsert),
            14 => Ok(enums::SW::MuteDevice),
            15 => Ok(enums::SW::PenInserted),
            16 => Ok(enums::SW::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::MSC {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::MSC::Serial),
            1 => Ok(enums::MSC::Pulseled),
            2 => Ok(enums::MSC::Gesture),
            3 => Ok(enums::MSC::Raw),
            4 => Ok(enums::MSC::Scan),
            5 => Ok(enums::MSC::Timestamp),
            7 => Ok(enums::MSC::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::LED {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::LED::Numl),
            1 => Ok(enums::LED::Capsl),
            2 => Ok(enums::LED::Scrolll),
            3 => Ok(enums::LED::Compose),
            4 => Ok(enums::LED::Kana),
            5 => Ok(enums::LED::Sleep),
            6 => Ok(enums::LED::Suspend),
            7 => Ok(enums::LED::Mute),
            8 => Ok(enums::LED::Misc),
            9 => Ok(enums::LED::Mail),
            10 => Ok(enums::LED::Charging),
            15 => Ok(enums::LED::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::REP {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::REP::Delay),
            1 => Ok(enums::REP::Max),
            _ => Err(())
        }
    }
}

impl TryFrom<u16> for enums::SND {
    type Error = ();

    fn try_from(key: u16) -> Result<Self, ()> {
        match key {
            0 => Ok(enums::SND::Click),
            1 => Ok(enums::SND::Bell),
            2 => Ok(enums::SND::Tone),
            7 => Ok(enums::SND::Max),
            _ => Err(())
        }
    }
}

impl From<enums::INPUT> for String {
    fn from(event: enums::INPUT) -> Self {
        match event {
            enums::INPUT::PropPointer => String::from("PROP_POINTER"),
            enums::INPUT::PropDirect => String::from("PROP_DIRECT"),
            enums::INPUT::PropButtonpad => String::from("PROP_BUTTONPAD"),
            enums::INPUT::PropSemiMt => String::from("PROP_SEMI_MT"),
            enums::INPUT::PropTopbuttonpad => String::from("PROP_TOPBUTTONPAD"),
            enums::INPUT::PropPointingStick => String::from("PROP_POINTING_STICK"),
            enums::INPUT::PropAccelerometer => String::from("PROP_ACCELEROMETER"),
            enums::INPUT::PropMax => String::from("PROP_MAX"),
        }
    }
}
impl From<enums::EV> for String {
    fn from(event: enums::EV) -> Self {
        match event {
            enums::EV::Syn => String::from("SYN"),
            enums::EV::Key => String::from("KEY"),
            enums::EV::Rel => String::from("REL"),
            enums::EV::Abs => String::from("ABS"),
            enums::EV::Msc => String::from("MSC"),
            enums::EV::Sw => String::from("SW"),
            enums::EV::Led => String::from("LED"),
            enums::EV::Snd => String::from("SND"),
            enums::EV::Rep => String::from("REP"),
            enums::EV::Ff => String::from("FF"),
            enums::EV::Pwr => String::from("PWR"),
            enums::EV::FfStatus => String::from("FF_STATUS"),
            enums::EV::Max => String::from("MAX"),
        }
    }
}
impl From<enums::SYN> for String {
    fn from(event: enums::SYN) -> Self {
        match event {
            enums::SYN::Report => String::from("REPORT"),
            enums::SYN::Config => String::from("CONFIG"),
            enums::SYN::MtReport => String::from("MT_REPORT"),
            enums::SYN::Dropped => String::from("DROPPED"),
            enums::SYN::Max => String::from("MAX"),
        }
    }
}
impl From<enums::KEY> for String {
    fn from(event: enums::KEY) -> Self {
        match event {
            enums::KEY::Esc => String::from("ESC"),
            enums::KEY::Key1 => String::from("1"),
            enums::KEY::Key2 => String::from("2"),
            enums::KEY::Key3 => String::from("3"),
            enums::KEY::Key4 => String::from("4"),
            enums::KEY::Key5 => String::from("5"),
            enums::KEY::Key6 => String::from("6"),
            enums::KEY::Key7 => String::from("7"),
            enums::KEY::Key8 => String::from("8"),
            enums::KEY::Key9 => String::from("9"),
            enums::KEY::Key0 => String::from("0"),
            enums::KEY::Minus => String::from("MINUS"),
            enums::KEY::Equal => String::from("EQUAL"),
            enums::KEY::Backspace => String::from("BACKSPACE"),
            enums::KEY::Tab => String::from("TAB"),
            enums::KEY::Q => String::from("Q"),
            enums::KEY::W => String::from("W"),
            enums::KEY::E => String::from("E"),
            enums::KEY::R => String::from("R"),
            enums::KEY::T => String::from("T"),
            enums::KEY::Y => String::from("Y"),
            enums::KEY::U => String::from("U"),
            enums::KEY::I => String::from("I"),
            enums::KEY::O => String::from("O"),
            enums::KEY::P => String::from("P"),
            enums::KEY::Leftbrace => String::from("LEFTBRACE"),
            enums::KEY::Rightbrace => String::from("RIGHTBRACE"),
            enums::KEY::Enter => String::from("ENTER"),
            enums::KEY::Leftctrl => String::from("LEFTCTRL"),
            enums::KEY::A => String::from("A"),
            enums::KEY::S => String::from("S"),
            enums::KEY::D => String::from("D"),
            enums::KEY::F => String::from("F"),
            enums::KEY::G => String::from("G"),
            enums::KEY::H => String::from("H"),
            enums::KEY::J => String::from("J"),
            enums::KEY::K => String::from("K"),
            enums::KEY::L => String::from("L"),
            enums::KEY::Semicolon => String::from("SEMICOLON"),
            enums::KEY::Apostrophe => String::from("APOSTROPHE"),
            enums::KEY::Grave => String::from("GRAVE"),
            enums::KEY::Leftshift => String::from("LEFTSHIFT"),
            enums::KEY::Backslash => String::from("BACKSLASH"),
            enums::KEY::Z => String::from("Z"),
            enums::KEY::X => String::from("X"),
            enums::KEY::C => String::from("C"),
            enums::KEY::V => String::from("V"),
            enums::KEY::B => String::from("B"),
            enums::KEY::N => String::from("N"),
            enums::KEY::M => String::from("M"),
            enums::KEY::Comma => String::from("COMMA"),
            enums::KEY::Dot => String::from("DOT"),
            enums::KEY::Slash => String::from("SLASH"),
            enums::KEY::Rightshift => String::from("RIGHTSHIFT"),
            enums::KEY::Kpasterisk => String::from("KPASTERISK"),
            enums::KEY::Leftalt => String::from("LEFTALT"),
            enums::KEY::Space => String::from("SPACE"),
            enums::KEY::Capslock => String::from("CAPSLOCK"),
            enums::KEY::F1 => String::from("F1"),
            enums::KEY::F2 => String::from("F2"),
            enums::KEY::F3 => String::from("F3"),
            enums::KEY::F4 => String::from("F4"),
            enums::KEY::F5 => String::from("F5"),
            enums::KEY::F6 => String::from("F6"),
            enums::KEY::F7 => String::from("F7"),
            enums::KEY::F8 => String::from("F8"),
            enums::KEY::F9 => String::from("F9"),
            enums::KEY::F10 => String::from("F10"),
            enums::KEY::Numlock => String::from("NUMLOCK"),
            enums::KEY::Scrolllock => String::from("SCROLLLOCK"),
            enums::KEY::Kp7 => String::from("KP7"),
            enums::KEY::Kp8 => String::from("KP8"),
            enums::KEY::Kp9 => String::from("KP9"),
            enums::KEY::Kpminus => String::from("KPMINUS"),
            enums::KEY::Kp4 => String::from("KP4"),
            enums::KEY::Kp5 => String::from("KP5"),
            enums::KEY::Kp6 => String::from("KP6"),
            enums::KEY::Kpplus => String::from("KPPLUS"),
            enums::KEY::Kp1 => String::from("KP1"),
            enums::KEY::Kp2 => String::from("KP2"),
            enums::KEY::Kp3 => String::from("KP3"),
            enums::KEY::Kp0 => String::from("KP0"),
            enums::KEY::Kpdot => String::from("KPDOT"),
            enums::KEY::Zenkakuhankaku => String::from("ZENKAKUHANKAKU"),
            enums::KEY::Key102nd => String::from("102ND"),
            enums::KEY::F11 => String::from("F11"),
            enums::KEY::F12 => String::from("F12"),
            enums::KEY::Ro => String::from("RO"),
            enums::KEY::Katakana => String::from("KATAKANA"),
            enums::KEY::Hiragana => String::from("HIRAGANA"),
            enums::KEY::Henkan => String::from("HENKAN"),
            enums::KEY::Katakanahiragana => String::from("KATAKANAHIRAGANA"),
            enums::KEY::Muhenkan => String::from("MUHENKAN"),
            enums::KEY::Kpjpcomma => String::from("KPJPCOMMA"),
            enums::KEY::Kpenter => String::from("KPENTER"),
            enums::KEY::Rightctrl => String::from("RIGHTCTRL"),
            enums::KEY::Kpslash => String::from("KPSLASH"),
            enums::KEY::Sysrq => String::from("SYSRQ"),
            enums::KEY::Rightalt => String::from("RIGHTALT"),
            enums::KEY::Linefeed => String::from("LINEFEED"),
            enums::KEY::Home => String::from("HOME"),
            enums::KEY::Up => String::from("UP"),
            enums::KEY::Pageup => String::from("PAGEUP"),
            enums::KEY::Left => String::from("LEFT"),
            enums::KEY::Right => String::from("RIGHT"),
            enums::KEY::End => String::from("END"),
            enums::KEY::Down => String::from("DOWN"),
            enums::KEY::Pagedown => String::from("PAGEDOWN"),
            enums::KEY::Insert => String::from("INSERT"),
            enums::KEY::Delete => String::from("DELETE"),
            enums::KEY::Macro => String::from("MACRO"),
            enums::KEY::Mute => String::from("MUTE"),
            enums::KEY::Volumedown => String::from("VOLUMEDOWN"),
            enums::KEY::Volumeup => String::from("VOLUMEUP"),
            enums::KEY::Power => String::from("POWER"),
            enums::KEY::Kpequal => String::from("KPEQUAL"),
            enums::KEY::Kpplusminus => String::from("KPPLUSMINUS"),
            enums::KEY::Pause => String::from("PAUSE"),
            enums::KEY::Scale => String::from("SCALE"),
            enums::KEY::Kpcomma => String::from("KPCOMMA"),
            enums::KEY::Hangeul => String::from("HANGEUL"),
            enums::KEY::Hanja => String::from("HANJA"),
            enums::KEY::Yen => String::from("YEN"),
            enums::KEY::Leftmeta => String::from("LEFTMETA"),
            enums::KEY::Rightmeta => String::from("RIGHTMETA"),
            enums::KEY::Compose => String::from("COMPOSE"),
            enums::KEY::Stop => String::from("STOP"),
            enums::KEY::Again => String::from("AGAIN"),
            enums::KEY::Props => String::from("PROPS"),
            enums::KEY::Undo => String::from("UNDO"),
            enums::KEY::Front => String::from("FRONT"),
            enums::KEY::Copy => String::from("COPY"),
            enums::KEY::Open => String::from("OPEN"),
            enums::KEY::Paste => String::from("PASTE"),
            enums::KEY::Find => String::from("FIND"),
            enums::KEY::Cut => String::from("CUT"),
            enums::KEY::Help => String::from("HELP"),
            enums::KEY::Menu => String::from("MENU"),
            enums::KEY::Calc => String::from("CALC"),
            enums::KEY::Setup => String::from("SETUP"),
            enums::KEY::Sleep => String::from("SLEEP"),
            enums::KEY::Wakeup => String::from("WAKEUP"),
            enums::KEY::File => String::from("FILE"),
            enums::KEY::Sendfile => String::from("SENDFILE"),
            enums::KEY::Deletefile => String::from("DELETEFILE"),
            enums::KEY::Xfer => String::from("XFER"),
            enums::KEY::Prog1 => String::from("PROG1"),
            enums::KEY::Prog2 => String::from("PROG2"),
            enums::KEY::Www => String::from("WWW"),
            enums::KEY::Msdos => String::from("MSDOS"),
            enums::KEY::Coffee => String::from("COFFEE"),
            enums::KEY::RotateDisplay => String::from("ROTATE_DISPLAY"),
            enums::KEY::Cyclewindows => String::from("CYCLEWINDOWS"),
            enums::KEY::Mail => String::from("MAIL"),
            enums::KEY::Bookmarks => String::from("BOOKMARKS"),
            enums::KEY::Computer => String::from("COMPUTER"),
            enums::KEY::Back => String::from("BACK"),
            enums::KEY::Forward => String::from("FORWARD"),
            enums::KEY::Closecd => String::from("CLOSECD"),
            enums::KEY::Ejectcd => String::from("EJECTCD"),
            enums::KEY::Ejectclosecd => String::from("EJECTCLOSECD"),
            enums::KEY::Nextsong => String::from("NEXTSONG"),
            enums::KEY::Playpause => String::from("PLAYPAUSE"),
            enums::KEY::Previoussong => String::from("PREVIOUSSONG"),
            enums::KEY::Stopcd => String::from("STOPCD"),
            enums::KEY::Record => String::from("RECORD"),
            enums::KEY::Rewind => String::from("REWIND"),
            enums::KEY::Phone => String::from("PHONE"),
            enums::KEY::Iso => String::from("ISO"),
            enums::KEY::Config => String::from("CONFIG"),
            enums::KEY::Homepage => String::from("HOMEPAGE"),
            enums::KEY::Refresh => String::from("REFRESH"),
            enums::KEY::Exit => String::from("EXIT"),
            enums::KEY::Move => String::from("MOVE"),
            enums::KEY::Edit => String::from("EDIT"),
            enums::KEY::Scrollup => String::from("SCROLLUP"),
            enums::KEY::Scrolldown => String::from("SCROLLDOWN"),
            enums::KEY::Kpleftparen => String::from("KPLEFTPAREN"),
            enums::KEY::Kprightparen => String::from("KPRIGHTPAREN"),
            enums::KEY::New => String::from("NEW"),
            enums::KEY::Redo => String::from("REDO"),
            enums::KEY::F13 => String::from("F13"),
            enums::KEY::F14 => String::from("F14"),
            enums::KEY::F15 => String::from("F15"),
            enums::KEY::F16 => String::from("F16"),
            enums::KEY::F17 => String::from("F17"),
            enums::KEY::F18 => String::from("F18"),
            enums::KEY::F19 => String::from("F19"),
            enums::KEY::F20 => String::from("F20"),
            enums::KEY::F21 => String::from("F21"),
            enums::KEY::F22 => String::from("F22"),
            enums::KEY::F23 => String::from("F23"),
            enums::KEY::F24 => String::from("F24"),
            enums::KEY::Playcd => String::from("PLAYCD"),
            enums::KEY::Pausecd => String::from("PAUSECD"),
            enums::KEY::Prog3 => String::from("PROG3"),
            enums::KEY::Prog4 => String::from("PROG4"),
            enums::KEY::Dashboard => String::from("DASHBOARD"),
            enums::KEY::Suspend => String::from("SUSPEND"),
            enums::KEY::Close => String::from("CLOSE"),
            enums::KEY::Play => String::from("PLAY"),
            enums::KEY::Fastforward => String::from("FASTFORWARD"),
            enums::KEY::Bassboost => String::from("BASSBOOST"),
            enums::KEY::Print => String::from("PRINT"),
            enums::KEY::Hp => String::from("HP"),
            enums::KEY::Camera => String::from("CAMERA"),
            enums::KEY::Sound => String::from("SOUND"),
            enums::KEY::Question => String::from("QUESTION"),
            enums::KEY::Email => String::from("EMAIL"),
            enums::KEY::Chat => String::from("CHAT"),
            enums::KEY::Search => String::from("SEARCH"),
            enums::KEY::Connect => String::from("CONNECT"),
            enums::KEY::Finance => String::from("FINANCE"),
            enums::KEY::Sport => String::from("SPORT"),
            enums::KEY::Shop => String::from("SHOP"),
            enums::KEY::Alterase => String::from("ALTERASE"),
            enums::KEY::Cancel => String::from("CANCEL"),
            enums::KEY::Brightnessdown => String::from("BRIGHTNESSDOWN"),
            enums::KEY::Brightnessup => String::from("BRIGHTNESSUP"),
            enums::KEY::Media => String::from("MEDIA"),
            enums::KEY::Switchvideomode => String::from("SWITCHVIDEOMODE"),
            enums::KEY::Kbdillumtoggle => String::from("KBDILLUMTOGGLE"),
            enums::KEY::Kbdillumdown => String::from("KBDILLUMDOWN"),
            enums::KEY::Kbdillumup => String::from("KBDILLUMUP"),
            enums::KEY::Send => String::from("SEND"),
            enums::KEY::Reply => String::from("REPLY"),
            enums::KEY::Forwardmail => String::from("FORWARDMAIL"),
            enums::KEY::Save => String::from("SAVE"),
            enums::KEY::Documents => String::from("DOCUMENTS"),
            enums::KEY::Battery => String::from("BATTERY"),
            enums::KEY::Bluetooth => String::from("BLUETOOTH"),
            enums::KEY::Wlan => String::from("WLAN"),
            enums::KEY::Uwb => String::from("UWB"),
            enums::KEY::Unknown => String::from("UNKNOWN"),
            enums::KEY::VideoNext => String::from("VIDEO_NEXT"),
            enums::KEY::VideoPrev => String::from("VIDEO_PREV"),
            enums::KEY::BrightnessCycle => String::from("BRIGHTNESS_CYCLE"),
            enums::KEY::BrightnessAuto => String::from("BRIGHTNESS_AUTO"),
            enums::KEY::DisplayOff => String::from("DISPLAY_OFF"),
            enums::KEY::Wwan => String::from("WWAN"),
            enums::KEY::Rfkill => String::from("RFKILL"),
            enums::KEY::Micmute => String::from("MICMUTE"),
            enums::KEY::Ok => String::from("OK"),
            enums::KEY::Select => String::from("SELECT"),
            enums::KEY::Goto => String::from("GOTO"),
            enums::KEY::Clear => String::from("CLEAR"),
            enums::KEY::Power2 => String::from("POWER2"),
            enums::KEY::Option => String::from("OPTION"),
            enums::KEY::Info => String::from("INFO"),
            enums::KEY::Time => String::from("TIME"),
            enums::KEY::Vendor => String::from("VENDOR"),
            enums::KEY::Archive => String::from("ARCHIVE"),
            enums::KEY::Program => String::from("PROGRAM"),
            enums::KEY::Channel => String::from("CHANNEL"),
            enums::KEY::Favorites => String::from("FAVORITES"),
            enums::KEY::Epg => String::from("EPG"),
            enums::KEY::Pvr => String::from("PVR"),
            enums::KEY::Mhp => String::from("MHP"),
            enums::KEY::Language => String::from("LANGUAGE"),
            enums::KEY::Title => String::from("TITLE"),
            enums::KEY::Subtitle => String::from("SUBTITLE"),
            enums::KEY::Angle => String::from("ANGLE"),
            enums::KEY::FullScreen => String::from("FULL_SCREEN"),
            enums::KEY::Mode => String::from("MODE"),
            enums::KEY::Keyboard => String::from("KEYBOARD"),
            enums::KEY::AspectRatio => String::from("ASPECT_RATIO"),
            enums::KEY::Pc => String::from("PC"),
            enums::KEY::Tv => String::from("TV"),
            enums::KEY::Tv2 => String::from("TV2"),
            enums::KEY::Vcr => String::from("VCR"),
            enums::KEY::Vcr2 => String::from("VCR2"),
            enums::KEY::Sat => String::from("SAT"),
            enums::KEY::Sat2 => String::from("SAT2"),
            enums::KEY::Cd => String::from("CD"),
            enums::KEY::Tape => String::from("TAPE"),
            enums::KEY::Radio => String::from("RADIO"),
            enums::KEY::Tuner => String::from("TUNER"),
            enums::KEY::Player => String::from("PLAYER"),
            enums::KEY::Text => String::from("TEXT"),
            enums::KEY::Dvd => String::from("DVD"),
            enums::KEY::Aux => String::from("AUX"),
            enums::KEY::Mp3 => String::from("MP3"),
            enums::KEY::Audio => String::from("AUDIO"),
            enums::KEY::Video => String::from("VIDEO"),
            enums::KEY::Directory => String::from("DIRECTORY"),
            enums::KEY::List => String::from("LIST"),
            enums::KEY::Memo => String::from("MEMO"),
            enums::KEY::Calendar => String::from("CALENDAR"),
            enums::KEY::Red => String::from("RED"),
            enums::KEY::Green => String::from("GREEN"),
            enums::KEY::Yellow => String::from("YELLOW"),
            enums::KEY::Blue => String::from("BLUE"),
            enums::KEY::Channelup => String::from("CHANNELUP"),
            enums::KEY::Channeldown => String::from("CHANNELDOWN"),
            enums::KEY::First => String::from("FIRST"),
            enums::KEY::Last => String::from("LAST"),
            enums::KEY::Ab => String::from("AB"),
            enums::KEY::Next => String::from("NEXT"),
            enums::KEY::Restart => String::from("RESTART"),
            enums::KEY::Slow => String::from("SLOW"),
            enums::KEY::Shuffle => String::from("SHUFFLE"),
            enums::KEY::Break => String::from("BREAK"),
            enums::KEY::Previous => String::from("PREVIOUS"),
            enums::KEY::Digits => String::from("DIGITS"),
            enums::KEY::Teen => String::from("TEEN"),
            enums::KEY::Twen => String::from("TWEN"),
            enums::KEY::Videophone => String::from("VIDEOPHONE"),
            enums::KEY::Games => String::from("GAMES"),
            enums::KEY::Zoomin => String::from("ZOOMIN"),
            enums::KEY::Zoomout => String::from("ZOOMOUT"),
            enums::KEY::Zoomreset => String::from("ZOOMRESET"),
            enums::KEY::Wordprocessor => String::from("WORDPROCESSOR"),
            enums::KEY::Editor => String::from("EDITOR"),
            enums::KEY::Spreadsheet => String::from("SPREADSHEET"),
            enums::KEY::Graphicseditor => String::from("GRAPHICSEDITOR"),
            enums::KEY::Presentation => String::from("PRESENTATION"),
            enums::KEY::Database => String::from("DATABASE"),
            enums::KEY::News => String::from("NEWS"),
            enums::KEY::Voicemail => String::from("VOICEMAIL"),
            enums::KEY::Addressbook => String::from("ADDRESSBOOK"),
            enums::KEY::Messenger => String::from("MESSENGER"),
            enums::KEY::Displaytoggle => String::from("DISPLAYTOGGLE"),
            enums::KEY::Spellcheck => String::from("SPELLCHECK"),
            enums::KEY::Logoff => String::from("LOGOFF"),
            enums::KEY::Dollar => String::from("DOLLAR"),
            enums::KEY::Euro => String::from("EURO"),
            enums::KEY::Frameback => String::from("FRAMEBACK"),
            enums::KEY::Frameforward => String::from("FRAMEFORWARD"),
            enums::KEY::ContextMenu => String::from("CONTEXT_MENU"),
            enums::KEY::MediaRepeat => String::from("MEDIA_REPEAT"),
            enums::KEY::Key10channelsup => String::from("10CHANNELSUP"),
            enums::KEY::Key10channelsdown => String::from("10CHANNELSDOWN"),
            enums::KEY::Images => String::from("IMAGES"),
            enums::KEY::DelEol => String::from("DEL_EOL"),
            enums::KEY::DelEos => String::from("DEL_EOS"),
            enums::KEY::InsLine => String::from("INS_LINE"),
            enums::KEY::DelLine => String::from("DEL_LINE"),
            enums::KEY::Fn => String::from("FN"),
            enums::KEY::FnEsc => String::from("FN_ESC"),
            enums::KEY::FnF1 => String::from("FN_F1"),
            enums::KEY::FnF2 => String::from("FN_F2"),
            enums::KEY::FnF3 => String::from("FN_F3"),
            enums::KEY::FnF4 => String::from("FN_F4"),
            enums::KEY::FnF5 => String::from("FN_F5"),
            enums::KEY::FnF6 => String::from("FN_F6"),
            enums::KEY::FnF7 => String::from("FN_F7"),
            enums::KEY::FnF8 => String::from("FN_F8"),
            enums::KEY::FnF9 => String::from("FN_F9"),
            enums::KEY::FnF10 => String::from("FN_F10"),
            enums::KEY::FnF11 => String::from("FN_F11"),
            enums::KEY::FnF12 => String::from("FN_F12"),
            enums::KEY::Fn1 => String::from("FN_1"),
            enums::KEY::Fn2 => String::from("FN_2"),
            enums::KEY::FnD => String::from("FN_D"),
            enums::KEY::FnE => String::from("FN_E"),
            enums::KEY::FnF => String::from("FN_F"),
            enums::KEY::FnS => String::from("FN_S"),
            enums::KEY::FnB => String::from("FN_B"),
            enums::KEY::BrlDot1 => String::from("BRL_DOT1"),
            enums::KEY::BrlDot2 => String::from("BRL_DOT2"),
            enums::KEY::BrlDot3 => String::from("BRL_DOT3"),
            enums::KEY::BrlDot4 => String::from("BRL_DOT4"),
            enums::KEY::BrlDot5 => String::from("BRL_DOT5"),
            enums::KEY::BrlDot6 => String::from("BRL_DOT6"),
            enums::KEY::BrlDot7 => String::from("BRL_DOT7"),
            enums::KEY::BrlDot8 => String::from("BRL_DOT8"),
            enums::KEY::BrlDot9 => String::from("BRL_DOT9"),
            enums::KEY::BrlDot10 => String::from("BRL_DOT10"),
            enums::KEY::Numeric0 => String::from("NUMERIC_0"),
            enums::KEY::Numeric1 => String::from("NUMERIC_1"),
            enums::KEY::Numeric2 => String::from("NUMERIC_2"),
            enums::KEY::Numeric3 => String::from("NUMERIC_3"),
            enums::KEY::Numeric4 => String::from("NUMERIC_4"),
            enums::KEY::Numeric5 => String::from("NUMERIC_5"),
            enums::KEY::Numeric6 => String::from("NUMERIC_6"),
            enums::KEY::Numeric7 => String::from("NUMERIC_7"),
            enums::KEY::Numeric8 => String::from("NUMERIC_8"),
            enums::KEY::Numeric9 => String::from("NUMERIC_9"),
            enums::KEY::NumericStar => String::from("NUMERIC_STAR"),
            enums::KEY::NumericPound => String::from("NUMERIC_POUND"),
            enums::KEY::NumericA => String::from("NUMERIC_A"),
            enums::KEY::NumericB => String::from("NUMERIC_B"),
            enums::KEY::NumericC => String::from("NUMERIC_C"),
            enums::KEY::NumericD => String::from("NUMERIC_D"),
            enums::KEY::CameraFocus => String::from("CAMERA_FOCUS"),
            enums::KEY::WpsButton => String::from("WPS_BUTTON"),
            enums::KEY::TouchpadToggle => String::from("TOUCHPAD_TOGGLE"),
            enums::KEY::TouchpadOn => String::from("TOUCHPAD_ON"),
            enums::KEY::TouchpadOff => String::from("TOUCHPAD_OFF"),
            enums::KEY::CameraZoomin => String::from("CAMERA_ZOOMIN"),
            enums::KEY::CameraZoomout => String::from("CAMERA_ZOOMOUT"),
            enums::KEY::CameraUp => String::from("CAMERA_UP"),
            enums::KEY::CameraDown => String::from("CAMERA_DOWN"),
            enums::KEY::CameraLeft => String::from("CAMERA_LEFT"),
            enums::KEY::CameraRight => String::from("CAMERA_RIGHT"),
            enums::KEY::AttendantOn => String::from("ATTENDANT_ON"),
            enums::KEY::AttendantOff => String::from("ATTENDANT_OFF"),
            enums::KEY::AttendantToggle => String::from("ATTENDANT_TOGGLE"),
            enums::KEY::LightsToggle => String::from("LIGHTS_TOGGLE"),
            enums::KEY::AlsToggle => String::from("ALS_TOGGLE"),
            enums::KEY::RotateLockToggle => String::from("ROTATE_LOCK_TOGGLE"),
            enums::KEY::Buttonconfig => String::from("BUTTONCONFIG"),
            enums::KEY::Taskmanager => String::from("TASKMANAGER"),
            enums::KEY::Journal => String::from("JOURNAL"),
            enums::KEY::Controlpanel => String::from("CONTROLPANEL"),
            enums::KEY::Appselect => String::from("APPSELECT"),
            enums::KEY::Screensaver => String::from("SCREENSAVER"),
            enums::KEY::Voicecommand => String::from("VOICECOMMAND"),
            enums::KEY::Assistant => String::from("ASSISTANT"),
            enums::KEY::KbdLayoutNext => String::from("KBD_LAYOUT_NEXT"),
            enums::KEY::BrightnessMin => String::from("BRIGHTNESS_MIN"),
            enums::KEY::BrightnessMax => String::from("BRIGHTNESS_MAX"),
            enums::KEY::KbdinputassistPrev => String::from("KBDINPUTASSIST_PREV"),
            enums::KEY::KbdinputassistNext => String::from("KBDINPUTASSIST_NEXT"),
            enums::KEY::KbdinputassistPrevgroup => String::from("KBDINPUTASSIST_PREVGROUP"),
            enums::KEY::KbdinputassistNextgroup => String::from("KBDINPUTASSIST_NEXTGROUP"),
            enums::KEY::KbdinputassistAccept => String::from("KBDINPUTASSIST_ACCEPT"),
            enums::KEY::KbdinputassistCancel => String::from("KBDINPUTASSIST_CANCEL"),
            enums::KEY::RightUp => String::from("RIGHT_UP"),
            enums::KEY::RightDown => String::from("RIGHT_DOWN"),
            enums::KEY::LeftUp => String::from("LEFT_UP"),
            enums::KEY::LeftDown => String::from("LEFT_DOWN"),
            enums::KEY::RootMenu => String::from("ROOT_MENU"),
            enums::KEY::MediaTopMenu => String::from("MEDIA_TOP_MENU"),
            enums::KEY::Numeric11 => String::from("NUMERIC_11"),
            enums::KEY::Numeric12 => String::from("NUMERIC_12"),
            enums::KEY::AudioDesc => String::from("AUDIO_DESC"),
            enums::KEY::Key3dMode => String::from("3D_MODE"),
            enums::KEY::NextFavorite => String::from("NEXT_FAVORITE"),
            enums::KEY::StopRecord => String::from("STOP_RECORD"),
            enums::KEY::PauseRecord => String::from("PAUSE_RECORD"),
            enums::KEY::Vod => String::from("VOD"),
            enums::KEY::Unmute => String::from("UNMUTE"),
            enums::KEY::Fastreverse => String::from("FASTREVERSE"),
            enums::KEY::Slowreverse => String::from("SLOWREVERSE"),
            enums::KEY::Data => String::from("DATA"),
            enums::KEY::OnscreenKeyboard => String::from("ONSCREEN_KEYBOARD"),
            enums::KEY::PrivacyScreenToggle => String::from("PRIVACY_SCREEN_TOGGLE"),
            enums::KEY::SelectiveScreenshot => String::from("SELECTIVE_SCREENSHOT"),
            enums::KEY::Macro1 => String::from("MACRO1"),
            enums::KEY::Macro2 => String::from("MACRO2"),
            enums::KEY::Macro3 => String::from("MACRO3"),
            enums::KEY::Macro4 => String::from("MACRO4"),
            enums::KEY::Macro5 => String::from("MACRO5"),
            enums::KEY::Macro6 => String::from("MACRO6"),
            enums::KEY::Macro7 => String::from("MACRO7"),
            enums::KEY::Macro8 => String::from("MACRO8"),
            enums::KEY::Macro9 => String::from("MACRO9"),
            enums::KEY::Macro10 => String::from("MACRO10"),
            enums::KEY::Macro11 => String::from("MACRO11"),
            enums::KEY::Macro12 => String::from("MACRO12"),
            enums::KEY::Macro13 => String::from("MACRO13"),
            enums::KEY::Macro14 => String::from("MACRO14"),
            enums::KEY::Macro15 => String::from("MACRO15"),
            enums::KEY::Macro16 => String::from("MACRO16"),
            enums::KEY::Macro17 => String::from("MACRO17"),
            enums::KEY::Macro18 => String::from("MACRO18"),
            enums::KEY::Macro19 => String::from("MACRO19"),
            enums::KEY::Macro20 => String::from("MACRO20"),
            enums::KEY::Macro21 => String::from("MACRO21"),
            enums::KEY::Macro22 => String::from("MACRO22"),
            enums::KEY::Macro23 => String::from("MACRO23"),
            enums::KEY::Macro24 => String::from("MACRO24"),
            enums::KEY::Macro25 => String::from("MACRO25"),
            enums::KEY::Macro26 => String::from("MACRO26"),
            enums::KEY::Macro27 => String::from("MACRO27"),
            enums::KEY::Macro28 => String::from("MACRO28"),
            enums::KEY::Macro29 => String::from("MACRO29"),
            enums::KEY::Macro30 => String::from("MACRO30"),
            enums::KEY::MacroRecordStart => String::from("MACRO_RECORD_START"),
            enums::KEY::MacroRecordStop => String::from("MACRO_RECORD_STOP"),
            enums::KEY::MacroPresetCycle => String::from("MACRO_PRESET_CYCLE"),
            enums::KEY::MacroPreset1 => String::from("MACRO_PRESET1"),
            enums::KEY::MacroPreset2 => String::from("MACRO_PRESET2"),
            enums::KEY::MacroPreset3 => String::from("MACRO_PRESET3"),
            enums::KEY::KbdLcdMenu1 => String::from("KBD_LCD_MENU1"),
            enums::KEY::KbdLcdMenu2 => String::from("KBD_LCD_MENU2"),
            enums::KEY::KbdLcdMenu3 => String::from("KBD_LCD_MENU3"),
            enums::KEY::KbdLcdMenu4 => String::from("KBD_LCD_MENU4"),
            enums::KEY::KbdLcdMenu5 => String::from("KBD_LCD_MENU5"),
            enums::KEY::Max => String::from("MAX"),
        }
    }
}
impl From<enums::BTN> for String {
    fn from(event: enums::BTN) -> Self {
        match event {
            enums::BTN::Btn0 => String::from("0"),
            enums::BTN::Btn1 => String::from("1"),
            enums::BTN::Btn2 => String::from("2"),
            enums::BTN::Btn3 => String::from("3"),
            enums::BTN::Btn4 => String::from("4"),
            enums::BTN::Btn5 => String::from("5"),
            enums::BTN::Btn6 => String::from("6"),
            enums::BTN::Btn7 => String::from("7"),
            enums::BTN::Btn8 => String::from("8"),
            enums::BTN::Btn9 => String::from("9"),
            enums::BTN::Left => String::from("LEFT"),
            enums::BTN::Right => String::from("RIGHT"),
            enums::BTN::Middle => String::from("MIDDLE"),
            enums::BTN::Side => String::from("SIDE"),
            enums::BTN::Extra => String::from("EXTRA"),
            enums::BTN::Forward => String::from("FORWARD"),
            enums::BTN::Back => String::from("BACK"),
            enums::BTN::Task => String::from("TASK"),
            enums::BTN::Trigger => String::from("TRIGGER"),
            enums::BTN::Thumb => String::from("THUMB"),
            enums::BTN::Thumb2 => String::from("THUMB2"),
            enums::BTN::Top => String::from("TOP"),
            enums::BTN::Top2 => String::from("TOP2"),
            enums::BTN::Pinkie => String::from("PINKIE"),
            enums::BTN::Base => String::from("BASE"),
            enums::BTN::Base2 => String::from("BASE2"),
            enums::BTN::Base3 => String::from("BASE3"),
            enums::BTN::Base4 => String::from("BASE4"),
            enums::BTN::Base5 => String::from("BASE5"),
            enums::BTN::Base6 => String::from("BASE6"),
            enums::BTN::Dead => String::from("DEAD"),
            enums::BTN::South => String::from("SOUTH"),
            enums::BTN::East => String::from("EAST"),
            enums::BTN::C => String::from("C"),
            enums::BTN::North => String::from("NORTH"),
            enums::BTN::West => String::from("WEST"),
            enums::BTN::Z => String::from("Z"),
            enums::BTN::Tl => String::from("TL"),
            enums::BTN::Tr => String::from("TR"),
            enums::BTN::Tl2 => String::from("TL2"),
            enums::BTN::Tr2 => String::from("TR2"),
            enums::BTN::Select => String::from("SELECT"),
            enums::BTN::Start => String::from("START"),
            enums::BTN::Mode => String::from("MODE"),
            enums::BTN::Thumbl => String::from("THUMBL"),
            enums::BTN::Thumbr => String::from("THUMBR"),
            enums::BTN::ToolPen => String::from("TOOL_PEN"),
            enums::BTN::ToolRubber => String::from("TOOL_RUBBER"),
            enums::BTN::ToolBrush => String::from("TOOL_BRUSH"),
            enums::BTN::ToolPencil => String::from("TOOL_PENCIL"),
            enums::BTN::ToolAirbrush => String::from("TOOL_AIRBRUSH"),
            enums::BTN::ToolFinger => String::from("TOOL_FINGER"),
            enums::BTN::ToolMouse => String::from("TOOL_MOUSE"),
            enums::BTN::ToolLens => String::from("TOOL_LENS"),
            enums::BTN::ToolQuinttap => String::from("TOOL_QUINTTAP"),
            enums::BTN::Stylus3 => String::from("STYLUS3"),
            enums::BTN::Touch => String::from("TOUCH"),
            enums::BTN::Stylus => String::from("STYLUS"),
            enums::BTN::Stylus2 => String::from("STYLUS2"),
            enums::BTN::ToolDoubletap => String::from("TOOL_DOUBLETAP"),
            enums::BTN::ToolTripletap => String::from("TOOL_TRIPLETAP"),
            enums::BTN::ToolQuadtap => String::from("TOOL_QUADTAP"),
            enums::BTN::GearDown => String::from("GEAR_DOWN"),
            enums::BTN::GearUp => String::from("GEAR_UP"),
            enums::BTN::DpadUp => String::from("DPAD_UP"),
            enums::BTN::DpadDown => String::from("DPAD_DOWN"),
            enums::BTN::DpadLeft => String::from("DPAD_LEFT"),
            enums::BTN::DpadRight => String::from("DPAD_RIGHT"),
            enums::BTN::TriggerHappy1 => String::from("TRIGGER_HAPPY1"),
            enums::BTN::TriggerHappy2 => String::from("TRIGGER_HAPPY2"),
            enums::BTN::TriggerHappy3 => String::from("TRIGGER_HAPPY3"),
            enums::BTN::TriggerHappy4 => String::from("TRIGGER_HAPPY4"),
            enums::BTN::TriggerHappy5 => String::from("TRIGGER_HAPPY5"),
            enums::BTN::TriggerHappy6 => String::from("TRIGGER_HAPPY6"),
            enums::BTN::TriggerHappy7 => String::from("TRIGGER_HAPPY7"),
            enums::BTN::TriggerHappy8 => String::from("TRIGGER_HAPPY8"),
            enums::BTN::TriggerHappy9 => String::from("TRIGGER_HAPPY9"),
            enums::BTN::TriggerHappy10 => String::from("TRIGGER_HAPPY10"),
            enums::BTN::TriggerHappy11 => String::from("TRIGGER_HAPPY11"),
            enums::BTN::TriggerHappy12 => String::from("TRIGGER_HAPPY12"),
            enums::BTN::TriggerHappy13 => String::from("TRIGGER_HAPPY13"),
            enums::BTN::TriggerHappy14 => String::from("TRIGGER_HAPPY14"),
            enums::BTN::TriggerHappy15 => String::from("TRIGGER_HAPPY15"),
            enums::BTN::TriggerHappy16 => String::from("TRIGGER_HAPPY16"),
            enums::BTN::TriggerHappy17 => String::from("TRIGGER_HAPPY17"),
            enums::BTN::TriggerHappy18 => String::from("TRIGGER_HAPPY18"),
            enums::BTN::TriggerHappy19 => String::from("TRIGGER_HAPPY19"),
            enums::BTN::TriggerHappy20 => String::from("TRIGGER_HAPPY20"),
            enums::BTN::TriggerHappy21 => String::from("TRIGGER_HAPPY21"),
            enums::BTN::TriggerHappy22 => String::from("TRIGGER_HAPPY22"),
            enums::BTN::TriggerHappy23 => String::from("TRIGGER_HAPPY23"),
            enums::BTN::TriggerHappy24 => String::from("TRIGGER_HAPPY24"),
            enums::BTN::TriggerHappy25 => String::from("TRIGGER_HAPPY25"),
            enums::BTN::TriggerHappy26 => String::from("TRIGGER_HAPPY26"),
            enums::BTN::TriggerHappy27 => String::from("TRIGGER_HAPPY27"),
            enums::BTN::TriggerHappy28 => String::from("TRIGGER_HAPPY28"),
            enums::BTN::TriggerHappy29 => String::from("TRIGGER_HAPPY29"),
            enums::BTN::TriggerHappy30 => String::from("TRIGGER_HAPPY30"),
            enums::BTN::TriggerHappy31 => String::from("TRIGGER_HAPPY31"),
            enums::BTN::TriggerHappy32 => String::from("TRIGGER_HAPPY32"),
            enums::BTN::TriggerHappy33 => String::from("TRIGGER_HAPPY33"),
            enums::BTN::TriggerHappy34 => String::from("TRIGGER_HAPPY34"),
            enums::BTN::TriggerHappy35 => String::from("TRIGGER_HAPPY35"),
            enums::BTN::TriggerHappy36 => String::from("TRIGGER_HAPPY36"),
            enums::BTN::TriggerHappy37 => String::from("TRIGGER_HAPPY37"),
            enums::BTN::TriggerHappy38 => String::from("TRIGGER_HAPPY38"),
            enums::BTN::TriggerHappy39 => String::from("TRIGGER_HAPPY39"),
            enums::BTN::TriggerHappy40 => String::from("TRIGGER_HAPPY40"),
        }
    }
}
impl From<enums::REL> for String {
    fn from(event: enums::REL) -> Self {
        match event {
            enums::REL::X => String::from("X"),
            enums::REL::Y => String::from("Y"),
            enums::REL::Z => String::from("Z"),
            enums::REL::Rx => String::from("RX"),
            enums::REL::Ry => String::from("RY"),
            enums::REL::Rz => String::from("RZ"),
            enums::REL::Hwheel => String::from("HWHEEL"),
            enums::REL::Dial => String::from("DIAL"),
            enums::REL::Wheel => String::from("WHEEL"),
            enums::REL::Misc => String::from("MISC"),
            enums::REL::WheelHiRes => String::from("WHEEL_HI_RES"),
            enums::REL::HwheelHiRes => String::from("HWHEEL_HI_RES"),
            enums::REL::Max => String::from("MAX"),
        }
    }
}
impl From<enums::ABS> for String {
    fn from(event: enums::ABS) -> Self {
        match event {
            enums::ABS::X => String::from("X"),
            enums::ABS::Y => String::from("Y"),
            enums::ABS::Z => String::from("Z"),
            enums::ABS::Rx => String::from("RX"),
            enums::ABS::Ry => String::from("RY"),
            enums::ABS::Rz => String::from("RZ"),
            enums::ABS::Throttle => String::from("THROTTLE"),
            enums::ABS::Rudder => String::from("RUDDER"),
            enums::ABS::Wheel => String::from("WHEEL"),
            enums::ABS::Gas => String::from("GAS"),
            enums::ABS::Brake => String::from("BRAKE"),
            enums::ABS::Hat0x => String::from("HAT0X"),
            enums::ABS::Hat0y => String::from("HAT0Y"),
            enums::ABS::Hat1x => String::from("HAT1X"),
            enums::ABS::Hat1y => String::from("HAT1Y"),
            enums::ABS::Hat2x => String::from("HAT2X"),
            enums::ABS::Hat2y => String::from("HAT2Y"),
            enums::ABS::Hat3x => String::from("HAT3X"),
            enums::ABS::Hat3y => String::from("HAT3Y"),
            enums::ABS::Pressure => String::from("PRESSURE"),
            enums::ABS::Distance => String::from("DISTANCE"),
            enums::ABS::TiltX => String::from("TILT_X"),
            enums::ABS::TiltY => String::from("TILT_Y"),
            enums::ABS::ToolWidth => String::from("TOOL_WIDTH"),
            enums::ABS::Volume => String::from("VOLUME"),
            enums::ABS::Misc => String::from("MISC"),
            enums::ABS::MtSlot => String::from("MT_SLOT"),
            enums::ABS::MtTouchMajor => String::from("MT_TOUCH_MAJOR"),
            enums::ABS::MtTouchMinor => String::from("MT_TOUCH_MINOR"),
            enums::ABS::MtWidthMajor => String::from("MT_WIDTH_MAJOR"),
            enums::ABS::MtWidthMinor => String::from("MT_WIDTH_MINOR"),
            enums::ABS::MtOrientation => String::from("MT_ORIENTATION"),
            enums::ABS::MtPositionX => String::from("MT_POSITION_X"),
            enums::ABS::MtPositionY => String::from("MT_POSITION_Y"),
            enums::ABS::MtToolType => String::from("MT_TOOL_TYPE"),
            enums::ABS::MtBlobId => String::from("MT_BLOB_ID"),
            enums::ABS::MtTrackingId => String::from("MT_TRACKING_ID"),
            enums::ABS::MtPressure => String::from("MT_PRESSURE"),
            enums::ABS::MtDistance => String::from("MT_DISTANCE"),
            enums::ABS::MtToolX => String::from("MT_TOOL_X"),
            enums::ABS::MtToolY => String::from("MT_TOOL_Y"),
            enums::ABS::Max => String::from("MAX"),
        }
    }
}
impl From<enums::SW> for String {
    fn from(event: enums::SW) -> Self {
        match event {
            enums::SW::Lid => String::from("LID"),
            enums::SW::TabletMode => String::from("TABLET_MODE"),
            enums::SW::HeadphoneInsert => String::from("HEADPHONE_INSERT"),
            enums::SW::RfkillAll => String::from("RFKILL_ALL"),
            enums::SW::MicrophoneInsert => String::from("MICROPHONE_INSERT"),
            enums::SW::Dock => String::from("DOCK"),
            enums::SW::LineoutInsert => String::from("LINEOUT_INSERT"),
            enums::SW::JackPhysicalInsert => String::from("JACK_PHYSICAL_INSERT"),
            enums::SW::VideooutInsert => String::from("VIDEOOUT_INSERT"),
            enums::SW::CameraLensCover => String::from("CAMERA_LENS_COVER"),
            enums::SW::KeypadSlide => String::from("KEYPAD_SLIDE"),
            enums::SW::FrontProximity => String::from("FRONT_PROXIMITY"),
            enums::SW::RotateLock => String::from("ROTATE_LOCK"),
            enums::SW::LineinInsert => String::from("LINEIN_INSERT"),
            enums::SW::MuteDevice => String::from("MUTE_DEVICE"),
            enums::SW::PenInserted => String::from("PEN_INSERTED"),
            enums::SW::Max => String::from("MAX"),
        }
    }
}
impl From<enums::MSC> for String {
    fn from(event: enums::MSC) -> Self {
        match event {
            enums::MSC::Serial => String::from("SERIAL"),
            enums::MSC::Pulseled => String::from("PULSELED"),
            enums::MSC::Gesture => String::from("GESTURE"),
            enums::MSC::Raw => String::from("RAW"),
            enums::MSC::Scan => String::from("SCAN"),
            enums::MSC::Timestamp => String::from("TIMESTAMP"),
            enums::MSC::Max => String::from("MAX"),
        }
    }
}
impl From<enums::LED> for String {
    fn from(event: enums::LED) -> Self {
        match event {
            enums::LED::Numl => String::from("NUML"),
            enums::LED::Capsl => String::from("CAPSL"),
            enums::LED::Scrolll => String::from("SCROLLL"),
            enums::LED::Compose => String::from("COMPOSE"),
            enums::LED::Kana => String::from("KANA"),
            enums::LED::Sleep => String::from("SLEEP"),
            enums::LED::Suspend => String::from("SUSPEND"),
            enums::LED::Mute => String::from("MUTE"),
            enums::LED::Misc => String::from("MISC"),
            enums::LED::Mail => String::from("MAIL"),
            enums::LED::Charging => String::from("CHARGING"),
            enums::LED::Max => String::from("MAX"),
        }
    }
}
impl From<enums::REP> for String {
    fn from(event: enums::REP) -> Self {
        match event {
            enums::REP::Delay => String::from("DELAY"),
            enums::REP::Max => String::from("MAX"),
        }
    }
}
impl From<enums::SND> for String {
    fn from(event: enums::SND) -> Self {
        match event {
            enums::SND::Click => String::from("CLICK"),
            enums::SND::Bell => String::from("BELL"),
            enums::SND::Tone => String::from("TONE"),
            enums::SND::Max => String::from("MAX"),
        }
    }
}
